#!/bin/bash
#
# Yandex.Disk backup script v0.3
#
# # # # # # # # # # НАСТРОЙКИ, КОТОРЫЕ МОЖНО ИЗМЕНИТЬ # # # # # # # # # # # # # 

# Yandex.Disk токен (как получить - см. README)
TOKEN=''

# Директория для временного хранения бэкапов, которые будут удалены после отправки на Яндекс.Диск
BACKUP_DIR='/backup'
 
# Название бэкапа, используется в логах и именах архивов
BACKUP_NAME='backupCatalog'

# Максимальное количество хранимых на Яндекс.Диске бэкапов (0 - хранить все бэкапы):
MAX_BACKUPS='7'

# Дата, используется в именах архивов
DATE=`date '+%Y-%m-%d'`

# Директории для архивации (указываются через пробел), которые будут помещены в единый архив и отправлены на Яндекс.Диск
DIRS='/home/ubuntu/db_files'

# Имя лог-файла, хранится в директории, указанной в $BACKUP_DIR
LOGFILE='backup.log'

# Отправлять только ошибки (true). Укажите false, если нужно отправлять логи при любом результате выполнения скрипта.
sendLogErrorsOnly='false'

# # # # # # # # # # КОНЕЦ НАСТРОЕК # # # # # # # # # # # # #
 
# # # # # # # # СКРИПТ, В КОТОРОМ НИЧЕГО НЕ НУЖНО МЕНЯТЬ! # # # # # # # # # #

function logger()
{
    echo "["`date "+%Y-%m-%d %H:%M:%S"`"] File $BACKUP_DIR: $1" >> $BACKUP_DIR/$LOGFILE
}

function parseJson()
{
    local output
    regex="(\"$1\":[\"]?)([^\",\}]+)([\"]?)"
    [[ $2 =~ $regex ]] && output=${BASH_REMATCH[2]}
    echo $output
}

function checkError()
{
    echo $(parseJson 'error' "$1")
}

function getUploadUrl()
{
    json_out=`curl -s -H "Authorization: OAuth $TOKEN" https://cloud-api.yandex.net:443/v1/disk/resources/upload/?path=app:/$backupName&overwrite=true`
    json_error=$(checkError "$json_out")
    if [[ $json_error != '' ]];
    then
        logger "$BACKUP_NAME - Yandex.Disk error: $json_error"
    echo ''
    else
        output=$(parseJson 'href' $json_out)
        echo $output
    fi
}

function uploadFile
{
    local json_out
    local uploadUrl
    local json_error
    uploadUrl=$(getUploadUrl)
    if [[ $uploadUrl != '' ]];
    then
    echo $UploadUrl
        json_out=`curl -s -T $1 -H "Authorization: OAuth $TOKEN" $uploadUrl`
        json_error=$(checkError "$json_out")
    if [[ $json_error != '' ]];
    then
        logger "$BACKUP_NAME - Yandex.Disk error: $json_error"
    else
        logger "$BACKUP_NAME - Copying file to Yandex.Disk success"

    fi
    else
    	echo 'Some errors occured. Check log file for detail'
    fi
}

function backups_list() {
    # Ищем в директории приложения все файлы бэкапов и выводим их названия:
    curl -s -H "Authorization: OAuth $TOKEN" "https://cloud-api.yandex.net:443/v1/disk/resources?path=app:/&sort=created&limit=100" | tr "{},[]" "\n" | grep "name[[:graph:]]*.tar.gz" | cut -d: -f 2 | tr -d '"'
}

function backups_count() {
    local bkps=$(backups_list | wc -l)
}

function remove_old_backups() {
    bkps=$(backups_count)
    old_bkps=$((bkps - MAX_BACKUPS))
    if [ "$old_bkps" -gt "0" ];then
        logger "Удаляем старые бэкапы с Яндекс.Диска"
        # Цикл удаления старых бэкапов:
        for i in `eval echo {1..$((old_bkps * 2))}`; do
            curl -X DELETE -s -H "Authorization: OAuth $TOKEN" "https://cloud-api.yandex.net:443/v1/disk/resources?path=app:/$(backups_list | awk '(NR == 1)')&permanently=true"
        done
    fi
}

logger "--- $BACKUP_NAME START BACKUP $DATE ---"

logger "Создаем архив каталогов $BACKUP_DIR/$DATE-files-$BACKUP_NAME.tar.gz"
tar -czf $BACKUP_DIR/$DATE-files-$BACKUP_NAME.tar.gz $DIRS

FILENAME=$DATE-files-$BACKUP_NAME.tar.gz
logger "Выгружаем на Яндекс.Диск архив с файлами $BACKUP_DIR/$DATE-files-$BACKUP_NAME.tar.gz"
backupName=$DATE-files-$BACKUP_NAME.tar.gz
uploadFile $BACKUP_DIR/$DATE-files-$BACKUP_NAME.tar.gz

logger "Удаляем архивы с диска"
find $BACKUP_DIR -type f -name "*.gz" -exec rm '{}' \;

# Удаляем старые бэкапы с Яндекс.Диска (если MAX_BACKUPS > 0)
if [ $MAX_BACKUPS -gt 0 ];then remove_old_backups; fi

logger "Cкрипт бэкапа завершен"
